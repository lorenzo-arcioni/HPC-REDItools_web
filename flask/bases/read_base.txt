import sys
import os
import shutil
import subprocess as sp
		
def main():
	"""
	This function executes a pipeline to run the reditools software on a given input directory with 
	specified reference, threads, processes, and workload manager. It creates a temporary directory and 
	executes multiple processes in parallel. The output files are created with the final_redi.tsv file 
	and a general.log file. 
	
	Parameters:
		None
	
	Returns:
		None
	"""

	inputdir            = "{}"
	reference           = "{}"
	executable          = "{}"
	bed_file            = "{}"
	splicing_file       = "{}"
	omopolymeric_file_r = "{}"
	additional_options  = "{}"
	threads             = "{}"
	wlm                 = "{}"

	header = "{}"

	pwd           = os.getcwd() # Get current path
	pwd = tmpdir  = os.path.join(pwd, "tmp") # Add to path the directory name

	# Creation of the tmp dir
	if os.path.exists(pwd):  # If tmp already exists delete all file inside it
		shutil.rmtree("tmp")

	os.mkdir("tmp")
	os.chdir(tmpdir)

	bam_files = [x for x in os.listdir(inputdir) if x.endswith(".bam")]


	# Creation of the processes execution files
	for idx, bam_file in enumerate(bam_files):
		os.mkdir(str(idx))
		os.chdir(str(idx))
		
		with open("script.sh", 'w', encoding='utf-8') as script:
			script.write("#!/bin/bash" + '\n')

			if wlm == "slurm":
				script.write(header) # Workload manager header
				script.write("#SBATCH --cpus-per-task=" + str(threads) + '\n')
				script.write("#SBATCH --job-name=PA_proc-" + str(idx) + '\n')
			
			script.write("/usr/bin/time -f \"%e\" " + str(executable) + " -m reditools \"" + str(inputdir + "/" + bam_file) + \
									"\" -r " + str(reference) + " -o ../\"" + bam_file + "\".reditools.tsv -t " + \
									str(threads))
			if bed_file != "":
				script.write(" --bed_file \"" + str(bed_file) + "\"")
			if splicing_file != "":
				script.write(" --splicing-file \"" + str(splicing_file) + "\"")
			if omopolymeric_file_r != "":
				script.write(" --load-omopolymeric-file \"" + str(omopolymeric_file_r) + "\"")
			if additional_options != "":
				script.write(" " + additional_options)
				
			script.write('\n')
			script.write("touch finish_flag")
			script.close()
		
		#Creation of the submission file
		if wlm == "htcondor":
			with open("submission.sub", 'w', encoding='utf-8') as sub:
				sub.write(header)
				sub.close()


		sp.call("chmod 777 ./script.sh", shell=True)	 #Make executable the script

		#Run the script
		if wlm == "slurm":
			sp.call("sbatch ./script.sh", shell=True)
		elif wlm == "htcondor":
			sp.call("condor_submit ./submission.sub", shell=True)
		else:
			sp.call("bash ./script.sh 1> general.out 2> general.err &", shell=True)

		os.chdir("../")
	os.chdir("../")
	
	#Run the control script
	if wlm == "slurm":
		sp.call("sbatch ./control_script.sh", shell=True)
	elif wlm == "htcondor" or wlm == "None":
		sp.call("nohup bash ./control_script.sh 1> control.out 2> control.err &", shell=True)

if __name__ == '__main__':
    sys.exit(main())